* Design Patterns

> [GoF의 디자인 패턴](http://book.naver.com/bookdb/book_detail.nhn?bid=8942623)

- 객체지향 소프트웨어를 설계한다다는 것은 쉬운일이 아닙니다. 게다가, 재사용할 수 있는 객체지향 소프트웨어를 만드는 것은 더 힘듭니다. 적절한 객체를 식별해야 하고, 올바른 크기의 클래스와 클래스의 인터페이스를 정의해야 하고, 클래스 간의 상속을 정의하며, 클래스들 간의 관계를 설정할 수 있어야 합니다. 설계는 지금 당장 갖고 있는 문제를 해결할 수 있어야 하지만, 나중에 생길 수 있는 문제나 차가 된 요구 사항들도 수용할 수 있도록 일반적이고 포괄적이어야 합니다. -P.25
- 전문가들은 초보자들처럼 모든 문제를 처음 기초 단계에서부터 해결하려고 하지 않습니다. 대신, 전에 사용했던 해결책을 다시 봅니다. 그리고 좋은 방법을 찾아냈다면 그 방법을 반복해서 계속 사용하게 됩니다. -P.26
- 건축가이자 패턴의 아버지, 크리스토퍼 알렉산더는 "각 디자인 패턴은 기존 환경 내에서 반복적으로 일어나는 문제들을 설명한 후, 그 문제들에 대한 해법의 핵심을 설명해 줍니다. 똑같은 방법으로 두 번 하지 않고 이 해법을 100만 번 이상 재사용할 수 있도록 말이죠."라고 하였습니다. -.P.27
